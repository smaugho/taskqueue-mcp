---
description: Workflow to follow for the Job / Project Category - Domain Rule Change
globs:
alwaysApply: false
---
```mermaid
flowchart TD
    A(Plan Review #1) --> B[Component Batch #1 Safety Net âœ”];
    B --> B_refactor[Component Batch #1 Refactor âœ‚];
    B_refactor --> B_reverify[Component Batch #1 Re-verify ðŸŸ¢];
    B_reverify -- Changes Verified --> B_CommitConfirm{Confirm & Commit Batch #1};
    B_CommitConfirm --> C(Plan Review #2);
    C --> D[Component Batch #2 ...];
    D --> E(...);
    E --> F(Plan Review #n);
    F --> G[âœ… Review Documentation];
    G -- Docs Updated --> G_CommitConfirm{Confirm & Commit Documentation};

    style A fill:#f9f,stroke:#333,stroke-width:2px
    style C fill:#f9f,stroke:#333,stroke-width:2px
    style F fill:#f9f,stroke:#333,stroke-width:2px
```

- **Task **`Plan Review #n`**:
    - **Initial Step:** Upon starting this task, its status **MUST** be updated to `in progress` using `mcp_taskqueue_update_task(projectId, taskId, status='in progress')`.
    - Run the full validation suite by executing the following commands one at a time, ensuring each passes before running the next: `npm test`.
    - Analyse the outcome of the validation suite to assess the current state of the refactoring efforts and overall code health.
    - **Mandatory Pre-Formulation Step: Perform Reference Gathering.** Following the `dev_workflow` procedure for "Reference Gathering for New Tasks", collect all necessary references. This informs the formulation of all proposed new tasks or documentation plans detailed below.
    - Define the scope and clear objectives for the next refactor batch or conclude refactoring if objectives are met.
    - Based on the preceding analysis, gathered references, and defined scope, formulate a comprehensive and detailed plan. This plan will determine:
        - If another `Component Batch #n+1` cycle (comprising `Safety Net âœ”`, `Refactor âœ‚`, `Re-verify ðŸŸ¢` tasks) is necessary to achieve refactoring goals.
        - Or, if refactoring goals have been satisfactorily met, whether to proceed to a `Review Documentation` task.
        - Crucially, this plan formulation **MUST** include the **full, detailed analysis, strategic decisions, and justifications** that will serve as the complete description for the subsequent `Plan Review #n+1` or `Review Documentation` task.
    - **Present the complete analysis and the comprehensive proposed plan (clearly indicating whether another Component Batch or Review Documentation is next, and including the intended full description for that next task) to the human developer.**
    - **Await explicit confirmation and approval from the human developer before proceeding to create any tasks.**
    - Upon receiving approval:
        - Create the proposed tasks as per the approved plan (i.e., the next Component Batch #n+1 cycle tasks and its subsequent Plan Review #n+1, or the Review Documentation task). When doing so, ensure that the description of each new task adheres to the structure defined in `dev_workflow.mdc`, explicitly including the "Related Tasks" section to link it with other concurrently created tasks (e.g., listing other batch tasks and the next Plan Review task by title and ID). The description for the *next* (`Plan Review #n+1` or `Review Documentation`) task **MUST** be populated with the full, detailed analysis and plan formulated above for the upcoming work, and **MUST also carry forward any unresolved items, pending decisions, or deferred topics from the current `Plan Review #n`** that were not actioned, unless explicitly removed by the human developer. Use `mcp_taskqueue_add_tasks_to_project` for task creation.
        - Record the human developer's approval and the successful creation of these new tasks in the `completedDetails` for this `Plan Review #n` task.
- **Task **`Component Batch #n â€“ Safety Net âœ”`**:
    - **Initial Step:** Upon starting this task, its status **MUST** be updated to `in progress` using `mcp_taskqueue_update_task(projectId, taskId, status='in progress')`.
    - Create/confirm characterisation tests; ensure all pass.
    - Refer to `code_quality.mdc` for general coding standards, especially when creating or modifying test code.
- **Task **`Component Batch #n â€“ Refactor âœ‚`**:
    - **Initial Step:** Upon starting this task, its status **MUST** be updated to `in progress` using `mcp_taskqueue_update_task(projectId, taskId, status='in progress')`.
    - Perform behaviourâ€‘preserving internal improvements, including removing unnecessary comments.
    - Actively look for opportunities to improve other parts of the files that were touched during the refactoring, even if these improvements are not directly related to the immediate objective of the current task.
    - Note potential test improvements for the next Plan Review.
    - Refer to `code_quality.mdc` for general coding standards.
- **Task **`Component Batch #n â€“ Re-verify ðŸŸ¢`**:
    - **Initial Step:** Upon starting this task, its status **MUST** be updated to `in progress` using `mcp_taskqueue_update_task(projectId, taskId, status='in progress')`.
    - Reâ€‘run tests.
    - Ensure lint checks pass (0 errors/0 warnings unless explicitly accepted) before proposing the commit.
    - Follow the **Standard Commit Procedure** (detailed below in this document, ensuring to include `.tasks.json` if changes were made to it). Record the commit hash in `completedDetails`.
- **Task **`Review Documentation`**:
    - **Initial Step:** Upon starting this task, its status **MUST** be updated to `in progress` using `mcp_taskqueue_update_task(projectId, taskId, status='in progress')`.
    - Update docs/rules.
    - Ensure lint checks pass (0 errors/0 warnings unless explicitly accepted) before proposing the commit.
    - Follow the **Standard Commit Procedure** (detailed below in this document). Record the commit hash in `completedDetails`.

- **Capturing Broader Plan Feedback Mid-Task**:
    - If, while a `Component Batch #n` task (Safety Net âœ”, Refactor âœ‚, or Re-verify ðŸŸ¢) is in progress, the human developer provides input or requests modifications that pertain to the *overall project plan* or scope for *future batches* (rather than the current task):
        - Acknowledge the human developer\'s input.
        - The AI agent should analyze and potentially enrich this input.
        - The AI agent **MUST** then identify the *next sequential, unapproved* task in the current project that is either a `Plan Review #(n+1)` (or similarly named, e.g., `Plan Review #2` if the current batch is `#1`) or the `Review Documentation` task (if this is the final component batch cycle). This involves:
            - Using `mcp_taskqueue_list_tasks` for the current `projectId`.
            - Filtering these tasks to find the relevant future `Plan Review` or `Review Documentation` task by its title and ensuring it is not yet approved.
        - The AI agent **MUST** then update the description of this identified future `Plan Review` or `Review Documentation` task by *appending* the human developer\'s input and any AI-generated enrichment. Care **MUST** be taken to preserve all existing content in that future task\'s description, especially the detailed plan carried over from any preceding Plan Review.
        - The current `Component Batch #n` task should then continue as originally defined, with the developer\'s broader plan feedback now safely captured for consideration at the next formal planning stage.

- **Standard Commit Procedure**:
    All commits, whether scheduled within a task (e.g., after a `Re-verify ðŸŸ¢` phase or `Review Documentation`) or requested ad-hoc by the human developer, **MUST** follow this procedure:

    1.  **Identify Changes:** Review the files modified in the workspace (e.g., using `git status --porcelain` or IDE indicators) that are ready to be committed.
    2.  **Craft Commit Message:** Prepare a commit message adhering to the Conventional Commits standard (see `commitlint.config.js`, which extends `@commitlint/config-conventional`). The message should accurately describe the work performed. Examples for Refactor/Chore:
        *   `refactor: simplify logic in XModule`
        *   `chore: update Y dependency to v2.0`
        *   `perf: optimize Z query for faster loading`
        *   `style: apply consistent formatting to A_DIR`
        *   `docs: update internal workflow guide`
    3.  **Seek Approval & Stage Files:**
        *   Present the list of files to be committed and the proposed commit message to the human developer for approval.
        *   Upon receiving approval, stage **only** the agreed-upon files using the appropriate git command (e.g., `git add <file1> <file2>...` or `git add path/to/specific/file.ts`). This should be a single terminal command. *Avoid using `git add .` unless explicitly approved and all unstaged changes are intended for the commit.*
    4.  **Perform Commit:** Execute the commit with the approved message (e.g., `git commit -m "Your conventional commit message"`). This should be a separate terminal command. Husky pre-commit hooks (linting, tests, etc.) will run automatically.
    5.  **Handle Hook Results & Record Hash:**
        *   **If Husky hooks fail:** The issues reported by Husky (e.g., linting errors, failing tests) **MUST** be corrected. After corrections, return to Step 3 (Seek Approval & Stage Files, as files will have changed) and repeat the commit process for the corrected changes.
        *   **If Husky hooks pass:** Obtain the commit hash (e.g., using `git log -1 --pretty=format:%H`). This hash **MUST** be recorded in the `completedDetails` of the current task when it is marked as 'done'.

    **Condition for Committing in Internal Workflow / Refactor / Chore Category:**
    *   **Scheduled Commits (end of `Re-verify ðŸŸ¢` or `Review Documentation` tasks):** All validations defined for that task (characterization tests, unit/integration tests, lint, build, E2E tests if applicable) **MUST** pass.
    *   **Ad-hoc Commits (requested by human developer mid-task):** All relevant tests (unit, integration, characterization) for the changes being committed **MUST** be passing. E2E tests should generally be passing as refactoring should not change external behavior. Linting and build checks for the files being committed **MUST** be clean. The human developer provides the final go-ahead.