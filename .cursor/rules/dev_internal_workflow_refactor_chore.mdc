---
description: Workflow to follow for the Job / Project Category - Domain Rule Change
globs:
alwaysApply: false
---

```mermaid
flowchart TD
    A(Plan Review #1) --> B[Component Batch #1 Safety Net âœ”];
    B --> B_refactor[Component Batch #1 Refactor âœ‚];
    B_refactor --> B_reverify[Component Batch #1 Re-verify ðŸŸ¢];
    B_reverify -- Changes Verified --> B_CommitConfirm{Confirm & Commit Batch #1};
    B_CommitConfirm --> C(Plan Review #2);
    C --> D[Component Batch #2 ...];
    D --> E(...);
    E --> F(Plan Review #n);
    F --> G[âœ… Review Documentation];
    G -- Docs Updated --> G_CommitConfirm{Confirm & Commit Documentation};

    style A fill:#f9f,stroke:#333,stroke-width:2px
    style C fill:#f9f,stroke:#333,stroke-width:2px
    style F fill:#f9f,stroke:#333,stroke-width:2px
```

- **Task **`Plan Review #n`**:
    - Run the full validation suite (`yarn test`, `yarn lint` (0 errors/0 warnings unless explicitly accepted), `yarn build`, `yarn start -h`, `yarn test:db:verify`, `yarn test:e2e`).
    - Analyse the outcome of the validation suite to assess the current state of the refactoring efforts and overall code health.
    - **Mandatory Pre-Formulation Step: Perform Reference Gathering.** Following the `dev_workflow` procedure for "Reference Gathering for New Tasks", collect all necessary references. This informs the formulation of all proposed new tasks or documentation plans detailed below.
    - Define the scope and clear objectives for the next refactor batch or conclude refactoring if objectives are met.
    - Based on the preceding analysis, gathered references, and defined scope, formulate a comprehensive and detailed plan. This plan will determine:
        - If another `Component Batch #n+1` cycle (comprising `Safety Net âœ”`, `Refactor âœ‚`, `Re-verify ðŸŸ¢` tasks) is necessary to achieve refactoring goals.
        - Or, if refactoring goals have been satisfactorily met, whether to proceed to a `Review Documentation` task.
        - Crucially, this plan formulation **MUST** include the **full, detailed analysis, strategic decisions, and justifications** that will serve as the complete description for the subsequent `Plan Review #n+1` or `Review Documentation` task.
    - **Present the complete analysis and the comprehensive proposed plan (clearly indicating whether another Component Batch or Review Documentation is next, and including the intended full description for that next task) to the human developer.**
    - **Await explicit confirmation and approval from the human developer before proceeding to create any tasks.**
    - Upon receiving approval:
        - Create the proposed tasks as per the approved plan (i.e., the next Component Batch #n+1 cycle tasks and its subsequent Plan Review #n+1, or the Review Documentation task). The description for the *next* (`Plan Review #n+1` or `Review Documentation`) task **MUST** be populated with the full, detailed analysis and plan formulated above for the upcoming work, and **MUST also carry forward any unresolved items, pending decisions, or deferred topics from the current `Plan Review #n`** that were not actioned, unless explicitly removed by the human developer. Use `mcp_taskqueue_add_tasks_to_project` for task creation.
        - Record the human developer's approval and the successful creation of these new tasks in the `completedDetails` for this `Plan Review #n` task.
- **Task **`Component Batch #n â€“ Safety Net âœ”`**:
    - Create/confirm characterisation tests; ensure all pass.
    - Refer to `code_quality.mdc` for general coding standards, especially when creating or modifying test code.
- **Task **`Component Batch #n â€“ Refactor âœ‚`**:
    - Perform behaviourâ€‘preserving internal improvements, including removing unnecessary comments.
    - Actively look for opportunities to improve other parts of the files that were touched during the refactoring, even if these improvements are not directly related to the immediate objective of the current task.
    - Note potential test improvements for the next Plan Review.
    - Refer to `code_quality.mdc` for general coding standards.
- **Task **`Component Batch #n â€“ Re-verify ðŸŸ¢`**:
    - Reâ€‘run tests.
    - Ensure lint checks pass (0 errors/0 warnings unless explicitly accepted) before proposing the commit.
    - Propose commit; await confirmation from human developer; commit; record hash.
- **Task **`Review Documentation`**:
    - Update docs/rules.
    - Ensure lint checks pass (0 errors/0 warnings unless explicitly accepted) before proposing the commit.
    - Propose commit; await confirmation from human developer; commit; record hash.

- **Capturing Broader Plan Feedback Mid-Task**:
    - If, while a `Component Batch #n` task (Safety Net âœ”, Refactor âœ‚, or Re-verify ðŸŸ¢) is in progress, the human developer provides input or requests modifications that pertain to the *overall project plan* or scope for *future batches* (rather than the current task):
        - Acknowledge the human developer\'s input.
        - The AI agent should analyze and potentially enrich this input.
        - The AI agent **MUST** then identify the *next sequential, unapproved* task in the current project that is either a `Plan Review #(n+1)` (or similarly named, e.g., `Plan Review #2` if the current batch is `#1`) or the `Review Documentation` task (if this is the final component batch cycle). This involves:
            - Using `mcp_taskqueue_list_tasks` for the current `projectId`.
            - Filtering these tasks to find the relevant future `Plan Review` or `Review Documentation` task by its title and ensuring it is not yet approved.
        - The AI agent **MUST** then update the description of this identified future `Plan Review` or `Review Documentation` task by *appending* the human developer\'s input and any AI-generated enrichment. Care **MUST** be taken to preserve all existing content in that future task\'s description, especially the detailed plan carried over from any preceding Plan Review.
        - The current `Component Batch #n` task should then continue as originally defined, with the developer\'s broader plan feedback now safely captured for consideration at the next formal planning stage.